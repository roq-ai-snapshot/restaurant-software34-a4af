generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model favorites {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?      @db.Uuid
  restaurant_id String?      @db.Uuid
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model inventory_items {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  restaurant_id String?      @db.Uuid
  name          String       @db.VarChar(255)
  quantity      Int
  unit          String       @db.VarChar(255)
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model menu_items {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  menu_id      String?       @db.Uuid
  name         String        @db.VarChar(255)
  price        Int
  availability Boolean
  menus        menus?        @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_items  order_items[]
}

model menus {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  restaurant_id String?      @db.Uuid
  menu_items    menu_items[]
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?  @db.Uuid
  message    String   @db.VarChar(255)
  created_at DateTime @db.Timestamp(6)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model order_items {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_id      String?     @db.Uuid
  menu_item_id  String?     @db.Uuid
  quantity      Int
  customization String?     @db.VarChar(255)
  menu_items    menu_items? @relation(fields: [menu_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders        orders?     @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id   String?       @db.Uuid
  restaurant_id String?       @db.Uuid
  status        String        @db.VarChar(255)
  order_type    String        @db.VarChar(255)
  total_price   Int
  created_at    DateTime      @db.Timestamp(6)
  updated_at    DateTime      @db.Timestamp(6)
  order_items   order_items[]
  users         users?        @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restaurants   restaurants?  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model restaurants {
  id                  String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  owner_id            String?           @db.Uuid
  name                String            @db.VarChar(255)
  location            String            @db.VarChar(255)
  contact_information String            @db.VarChar(255)
  operating_hours     String            @db.VarChar(255)
  favorites           favorites[]
  inventory_items     inventory_items[]
  menus               menus[]
  orders              orders[]
  users               users?            @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  staff_members       staff_members[]
}

model staff_members {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?      @db.Uuid
  restaurant_id String?      @db.Uuid
  role          String       @db.VarChar(255)
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role          String          @db.VarChar(255)
  name          String          @db.VarChar(255)
  email         String          @unique @db.VarChar(255)
  password      String          @db.VarChar(255)
  favorites     favorites[]
  notifications notifications[]
  orders        orders[]
  restaurants   restaurants[]
  staff_members staff_members[]
}
